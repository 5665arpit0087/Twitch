{"version":3,"sources":["Api.js","Components/Games.js","Components/Header.js","Components/Streams.js","Components/GamesStream.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","headers","Games","useState","games","setGames","useEffect","a","get","result","data","map","game","newURL","box_art_url","replace","fetchData","className","src","name","to","pathname","state","gameID","id","Header","Component","Streams","channels","setChannels","dataArray","gameIDs","stream","game_id","queryParams","finalURL","gameNames","gameNameArray","finalArray","gameName","thumbnail_url","channel","user_name","viewer_count","href","target","GamesStream","match","location","streamData","setStreamData","viewers","setViewers","totalViewers","reduce","acc","val","params","App","exact","path","component","GameStream","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAOeA,E,OANLC,EAAMC,OAAO,CACnBC,QAAS,CACL,YAAa,oCC+CNC,EA/CD,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,KAehB,OAbAC,qBAAU,YACS,uCAAG,8BAAAC,EAAA,sEACOT,EAAIU,IAAI,yCADf,OACRC,EADQ,OAEVC,EAAOD,EAAOC,KAAKA,KACPA,EAAKC,KAAI,SAAAC,GACrB,IAAIC,EAASD,EAAKE,YAAYC,QAAQ,UAAW,OAAOA,QAAQ,WAAY,OAC5EH,EAAKE,YAAcD,KAGvBR,EAASI,EAAOC,KAAKA,MARP,2CAAH,qDAUfM,KACD,IAEC,6BACI,kDACA,yBAAKC,UAAU,OACVb,EAAMO,KAAI,SAAAC,GAAI,OACX,yBAAKK,UAAU,oCACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,eAAeC,IAAKN,EAAKE,cACxC,yBAAKG,UAAU,aACX,wBAAIA,UAAU,cAAcL,EAAKO,MACjC,4BAAQF,UAAU,mBACd,kBAAC,IAAD,CACIA,UAAU,OACVG,GAAI,CACAC,SAAU,QAAUT,EAAKO,KACzBG,MAAO,CACHC,OAAQX,EAAKY,MAIpBZ,EAAKO,KATV,WASwB,e,6CCpB7CM,E,2MAfXH,MAAQ,G,wEAEJ,OACI,yBAAKL,UAAU,iCACX,wBAAIA,UAAU,qBACV,kBAAC,IAAD,CAAMG,GAAG,KAAT,cAEJ,wBAAIH,UAAU,qBACV,kBAAC,IAAD,CAAMG,GAAG,gBAAT,0B,GATCM,aCyENC,MAzEf,WAAoB,IAAD,EACiBxB,mBAAS,IAD1B,mBACRyB,EADQ,KACEC,EADF,KAwCf,OAtCAvB,qBAAU,YACS,uCAAG,0CAAAC,EAAA,sEACOT,EAAIU,IAAI,uCADf,cACRC,EADQ,OAEVqB,EAAYrB,EAAOC,KAAKA,KAExBqB,EAAUD,EAAUnB,KAAI,SAAAqB,GACxB,OAAOA,EAAOC,WAIJ,qCACVC,EAAc,GAClBH,EAAQpB,KAAI,SAAAa,GACR,OAAQU,GAAyB,aAASV,EAAT,QAGjCW,EANU,qCAMWD,EAfX,UAgBQpC,EAAIU,IAAI2B,GAhBhB,QAgBVC,EAhBU,OAiBVC,EAAgBD,EAAU1B,KAAKA,KAE/B4B,EAAaR,EAAUnB,KAAI,SAAAqB,GAC3BA,EAAOO,SAAW,GAClBF,EAAc1B,KAAI,SAAAQ,GACd,GAAIa,EAAOC,UAAYd,EAAKK,GACxB,OAAQQ,EAAOO,SAAWpB,EAAKA,QAIvC,IAAIN,EAASmB,EAAOQ,cACfzB,QAAQ,UAAW,OACnBA,QAAQ,WAAY,OAEzB,OADAiB,EAAOQ,cAAgB3B,EAChBmB,KAEXH,EAAYS,GAjCE,4CAAH,qDAmCftB,KACD,IAEC,uCAEI,yDACA,yBAAKC,UAAU,OACVW,EAASjB,KAAI,SAAA8B,GAAO,OACjB,yBAAKxB,UAAU,oCACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,eAAeC,IAAKuB,EAAQD,gBAC3C,yBAAKvB,UAAU,aACX,wBAAIA,UAAU,cAAcwB,EAAQC,WACpC,wBAAIzB,UAAU,aAAd,IAA4BwB,EAAQF,UACpC,yBAAKtB,UAAU,aACVwB,EAAQE,aADb,iBAGA,4BAAQ1B,UAAU,mBACd,uBACI2B,KAAM,qBAAuBH,EAAQC,UACrCzB,UAAU,OACV4B,OAAO,UAHX,SAKWJ,EAAQC,UALnB,wB,OCOrBI,MA9Df,YAA2C,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAAY,EACF7C,mBAAS,IADP,mBAC/B8C,EAD+B,KACnBC,EADmB,OAER/C,mBAAS,GAFD,mBAE/BgD,EAF+B,KAEtBC,EAFsB,KA0BtC,OAtBA9C,qBAAU,YACS,uCAAG,kCAAAC,EAAA,sEACOT,EAAIU,IAAJ,sDAC8BwC,EAAS1B,MAAMC,SAFpD,OACRd,EADQ,OAIVqB,EAAYrB,EAAOC,KAAKA,KACxB4B,EAAaR,EAAUnB,KAAI,SAAAqB,GAC3B,IAAInB,EAASmB,EAAOQ,cACfzB,QAAQ,UAAW,OACnBA,QAAQ,WAAY,OAEzB,OADAiB,EAAOQ,cAAgB3B,EAChBmB,KAGPqB,EAAef,EAAWgB,QAAO,SAACC,EAAKC,GACvC,OAAOD,EAAMC,EAAIb,eAClB,GACHS,EAAWC,GACXH,EAAcZ,GAjBA,2CAAH,qDAmBftB,KACD,IAEC,6BACI,wBAAIC,UAAU,eAAe8B,EAAMU,OAAOjC,GAA1C,YACA,wBAAIP,UAAU,eACV,4BAAQA,UAAU,gBAAgBkC,GADtC,8BAEMJ,EAAMU,OAAOjC,IAEnB,yBAAKP,UAAU,OACVgC,EAAWtC,KAAI,SAAAqB,GAAM,OAClB,yBAAKf,UAAU,oCACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,eAAeC,IAAKc,EAAOQ,gBAC1C,yBAAKvB,UAAU,aACX,wBAAIA,UAAU,cAAce,EAAOU,WACnC,yBAAKzB,UAAU,aACVe,EAAOW,aADZ,iBAGA,4BAAQ1B,UAAU,mBACd,uBACIA,UAAU,OACV2B,KAAM,qBAAuBZ,EAAOU,UACpCG,OAAO,UAHX,SAKWb,EAAOU,UALlB,wB,OC5BrBgB,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3D,IACjC,kBAAC,IAAD,CAAO0D,KAAK,cAAcC,UAAWlC,IACrC,kBAAC,IAAD,CAAOiC,KAAK,YAAYC,UAAWC,M,cCFrBC,QACW,cAA7BC,OAAOhB,SAASiB,UAEe,UAA7BD,OAAOhB,SAASiB,UAEhBD,OAAOhB,SAASiB,SAASlB,MACvB,2DCXNmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2f783347.chunk.js","sourcesContent":["import axios from 'axios'\nlet api = axios.create({\n    headers: {\n        \"Client-ID\": \"grf3rfahpixhcetkhdp0ccjyo3s1dw\"\n    }\n})\n\nexport default api;","import React, { Component, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport api from '../Api';\nconst Games = () => {\n    const [games, setGames] = useState([])\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await api.get('https://api.twitch.tv/helix/games/top')\n            let data = result.data.data\n            let finalData = data.map(game => {\n                let newURL = game.box_art_url.replace('{width}', '300').replace('{height}', '300')\n                game.box_art_url = newURL\n            })\n            // console.log(result.data)\n            setGames(result.data.data)\n        };\n        fetchData()\n    }, [])\n    return (\n        <div>\n            <h1>Most Popular Games</h1>\n            <div className=\"row\">\n                {games.map(game => (\n                    <div className=\"col-lg-4 col-md-6 col-sm-12 mt-5\">\n                        <div className=\"card\">\n                            <img className=\"card-img-top\" src={game.box_art_url} />\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">{game.name}</h5>\n                                <button className=\"btn btn-success\">\n                                    <Link\n                                        className=\"link\"\n                                        to={{\n                                            pathname: \"game/\" + game.name,\n                                            state: {\n                                                gameID: game.id\n                                            }\n                                        }}\n                                    >\n                                        {game.name} streams{\" \"}\n                                    </Link>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default Games;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nclass Header extends Component {\n    state = {}\n    render() {\n        return (\n            <nav className=\"navbar justify-content-center\">\n                <li className=\"nav-item nav-link\">\n                    <Link to='/'>Top Games</Link>\n                </li>\n                <li className=\"nav-item nav-link\">\n                    <Link to='/top-streams'>Top Live Streams</Link>\n                </li>\n            </nav>\n        );\n    }\n}\n\nexport default Header;","import React, { useEffect, useState } from \"react\";\nimport api from \"../Api\";\nfunction Streams() {\n    const [channels, setChannels] = useState([]);\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await api.get(\"https://api.twitch.tv/helix/streams\");\n            let dataArray = result.data.data;\n            //console.log(dataArray);\n            let gameIDs = dataArray.map(stream => {\n                return stream.game_id;\n            });\n            //console.log(gameIDs);\n\n            let baseURL = \"https://api.twitch.tv/helix/games?\";\n            let queryParams = \"\";\n            gameIDs.map(id => {\n                return (queryParams = queryParams + `id=${id}&`);\n            });\n\n            let finalURL = baseURL + queryParams;\n            let gameNames = await api.get(finalURL);\n            let gameNameArray = gameNames.data.data;\n\n            let finalArray = dataArray.map(stream => {\n                stream.gameName = \"\";\n                gameNameArray.map(name => {\n                    if (stream.game_id === name.id) {\n                        return (stream.gameName = name.name);\n                    }\n                });\n\n                let newURL = stream.thumbnail_url\n                    .replace(\"{width}\", \"300\")\n                    .replace(\"{height}\", \"300\");\n                stream.thumbnail_url = newURL;\n                return stream;\n            });\n            setChannels(finalArray);\n        };\n        fetchData();\n    }, []);\n    return (\n        <div>\n            FGFGHGH\n            <h1>Most Popular Live Streams</h1>\n            <div className=\"row\">\n                {channels.map(channel => (\n                    <div className=\"col-lg-4 col-md-6 col-sm-12 mt-5\">\n                        <div className=\"card\">\n                            <img className=\"card-img-top\" src={channel.thumbnail_url} />\n                            <div className=\"card-body\">\n                                <h3 className=\"card-title\">{channel.user_name}</h3>\n                                <h5 className=\"card-text\"> {channel.gameName}</h5>\n                                <div className=\"card-text\">\n                                    {channel.viewer_count} live viewers\n                </div>\n                                <button className=\"btn btn-success\">\n                                    <a\n                                        href={\"https://twitch.tv/\" + channel.user_name}\n                                        className=\"link\"\n                                        target=\"_blank\"\n                                    >\n                                        watch {channel.user_name}'s' stream\n                  </a>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default Streams;","import React, { Component, useState, useEffect } from 'react';\nimport api from '../Api';\nimport { validate } from '@babel/types';\nfunction GamesStream({ match, location }) {\n    const [streamData, setStreamData] = useState([]);\n    const [viewers, setViewers] = useState(0);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await api.get(\n                `https://api.twitch.tv/helix/streams?game_id=${location.state.gameID}`\n            );\n            let dataArray = result.data.data;\n            let finalArray = dataArray.map(stream => {\n                let newURL = stream.thumbnail_url\n                    .replace(\"{width}\", \"300\")\n                    .replace(\"{height}\", \"300\");\n                stream.thumbnail_url = newURL;\n                return stream;\n            });\n\n            let totalViewers = finalArray.reduce((acc, val) => {\n                return acc + val.viewer_count;\n            }, 0);\n            setViewers(totalViewers);\n            setStreamData(finalArray);\n        };\n        fetchData();\n    }, []);\n    return (\n        <div>\n            <h1 className=\"text-center\">{match.params.id} Streams</h1>\n            <h3 className=\"text-center\">\n                <strong className=\"text-primary\">{viewers}</strong> people currently\n        watching {match.params.id}\n            </h3>\n            <div className=\"row\">\n                {streamData.map(stream => (\n                    <div className=\"col-lg-4 col-md-6 col-sm-12 mt-5\">\n                        <div className=\"card\">\n                            <img className=\"card-img-top\" src={stream.thumbnail_url} />\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">{stream.user_name}</h5>\n                                <div className=\"card-text\">\n                                    {stream.viewer_count} live viewers\n                </div>\n                                <button className=\"btn btn-success\">\n                                    <a\n                                        className=\"link\"\n                                        href={\"https://twitch.tv/\" + stream.user_name}\n                                        target=\"_blank\"\n                                    >\n                                        watch {stream.user_name}'s channel\n                  </a>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\n\nexport default GamesStream;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Games from './Components/Games'\nimport Header from './Components/Header'\nimport Streams from './Components/Streams';\nimport GameStream from './Components/GamesStream'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Route exact path='/' component={Games} />\n      <Route path='top-streams' component={Streams} />\n      <Route path='/game/:id' component={GameStream} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'shards-ui/dist/css/shards.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}